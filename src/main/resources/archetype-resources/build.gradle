plugins {
    id "java"
    id "maven-publish"
    id "signing"
    //id "checkstyle"

    id "org.embulk.embulk-plugins" version "0.7.0"  
}

repositories {
    mavenCentral()
}

// Set your own group ID
group = "${groupId}"
version = "${version}"
description = "An embulk plugin to..."

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly "org.embulk:embulk-spi:0.11"

    implementation "org.embulk:embulk-util-file:0.2.0"
    implementation "org.embulk:embulk-util-config:0.5.0"

    // The Embulk main packages are often required for testing.
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.embulk:embulk-spi:0.11"
    testImplementation "org.embulk:embulk-core:0.11.0"
    testImplementation "org.embulk:embulk-deps:0.11.0"
    testImplementation "org.embulk:embulk-junit4:0.11.0"
}

embulkPlugin {
    mainClass = "${package}.${type.substring(0,1).toUpperCase()}${type.substring(1)}InputPlugin"
    category = "${category}"
    type = "${type}"
}

// It would be a good habit to contain the LICENSE file(s) at "META-INF/" in your plugin packages.
jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}
sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}
javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

// The publishing settings are usually required to publish the plugin to Maven Central.
// Publish it by: "./gradlew publishMavenPublicationToMavenRepository"
// publishing {
//     publications {
//         maven(MavenPublication) {
//             groupId = project.group
//             artifactId = project.name

//             from components.java
//             // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
//             // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

//             // Some pom.xml attributes are mandatory in Maven Central.
//             // See: https://central.sonatype.org/pages/requirements.html
//             pom {
//                 packaging "jar"

//                 name = project.name
//                 description = project.description
//                 url = "https://.../"

//                 licenses {
//                     license {
//                         // See: http://central.sonatype.org/pages/requirements.html#license-information
//                         name = "..."
//                         url = "..."
//                         distribution = "repo"
//                     }
//                 }

//                 developers {
//                     developer {
//                         name = "..."
//                         email = "..."
//                     }
//                     developer {
//                         name = "..."
//                         email = "..."
//                     }
//                     // ...
//                 }

//                 scm {
//                     connection = "scm:git:git://github.com/.../....git"
//                     developerConnection = "scm:git:git@github.com:.../....git"
//                     url = "https://github.com/.../..."
//                 }
//             }
//         }
//     }

//     repositories {
//         maven {  // publishMavenPublicationToMavenCentralRepository
//             name = "mavenCentral"

//             // Note that the URLs may be different in your case, depending on your OSSRH / Sonatype registration.
//             // See: https://central.sonatype.org/publish/publish-maven/
//             if (project.version.endsWith("-SNAPSHOT")) {
//                 url "https://oss.sonatype.org/content/repositories/snapshots"
//             } else {
//                 url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
//             }

//             // Just an optional technique to specify OSSRH username and password from Gradle properties.
//             //
//             // It is sometimes useful to publish the plugin to Maven Central from CI like GitHub Actions.
//             credentials {
//                 username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
//                 password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
//             }
//         }
//     }
// }

// The signing settings are usually required to publish the plugin to Maven Central.
// See: https://central.sonatype.org/publish/requirements/gpg/
// signing {
//     // Just an optional technique to specify a GPG key and password from Gradle properties.
//     //
//     // Set your GPG key into "signingKey" in the ASCII armor format.
//     // Set your GPG key password into "signingPassword".
//     //
//     // It is sometimes useful to publish the plugin to Maven Central from CI like GitHub Actions.
//     if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
//         logger.lifecycle("Signing with an in-memory key.")
//         useInMemoryPgpKeys(signingKey, signingPassword)
//     }

//     sign publishing.publications.maven
// }

// Enable the following "gem" and "gemPush" tasks if you want to publish your plugin also as a Ruby Gem.

gem {
     authors = [ "..." ]
     email = [ "..." ]
     // "description" of the Ruby Gem would come from "description" of the Gradle project.
     summary = "{{cookiecutter.project_short_description}}"
     homepage = "https://.../"
     licenses = [ "..." ]  // See: https://guides.rubygems.org/specification-reference/#license=

     from("LICENSE")  // If you want to include LICENSE file(s) in the Ruby Gem package.
}

// Push it by: "./gradlew gemPush"
// gemPush {
//     host = "https://rubygems.org"
// }
